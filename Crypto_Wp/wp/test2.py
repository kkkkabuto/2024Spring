from sympy import gcd, isprime
from Crypto.Util.number import *
from gmpy2 import *
from Crypto.Util.number import *

b = "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891134567799112455688902334677801133557889113356678911245577991223456790012455788902234677801124557799122355788001345578890123566789113445778012235578800123467889122356678911344567991223557880012455788912235667900124556899023355788001234578890123566780013445679902334577801134456899022346778902344578801233467789112355779912234577990233556780113"


def custom_add_decrypt(input_str):
    input_list = list(input_str)
    length = len(input_list)

    for i in range(length):
        input_list[i] = str((int(input_list[i]) - i - 1) % 10)

    result = "".join(input_list)
    return result


a = custom_add_decrypt(b)
a = "0b" + a
print(a)


def swap_bits(input_str):
    input_list = list(input_str[2:])
    length = len(input_list)

    for i in range(length // 2):
        temp = input_list[i]
        input_list[i] = input_list[length - 1 - i]
        input_list[length - 1 - i] = temp

    return "".join(input_list)


res = swap_bits(a)

print(res)
leak = 0b1011000010110010100001101010100010001100111101100111000011000100110001101100100011001000011001000110000001100000010110101100110011000110011001100110110001011010011010000110100001100110011100000101101001110010011010000110000001101110010110100110101011001100110001000110110001100000011010101100100001101010011010101100110011000100110010101111101
print(long_to_bytes(leak))
